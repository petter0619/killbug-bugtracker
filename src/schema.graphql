# --------------- PROJECT ---------------
type Project {
	id: ID
	name: String
	description: String
	tickets: [ProjectTicketItem]
}

type ProjectTicketItem {
	id: ID!
	title: String
	description: String
	type: TicketType
	priority: TicketPriority
	status: TicketStatus
}

# --------------- ./projects ---------------

# --------------- TICKET ---------------

type Ticket {
	id: ID
	title: String
	description: String
	type: TicketType
	priority: TicketPriority
	status: TicketStatus
	project: TicketProjectItem
}

type TicketProjectItem {
	id: ID!
	name: String
	description: String
}

enum TicketType {
	BUG
	NEW_FEATURE
	OTHER
}

enum TicketPriority {
	CRITICAL
	HIGH
	MEDIUM
	LOW
}

enum TicketStatus {
	NEW
	IN_DEVELOPMENT
	IN_REVIEW
	READY_FOR_TEST
	COMPLETED
}

# --------------- ./tickets ---------------

type DeletedResourceResponse {
	deletedId: ID
	success: Boolean
}

type Query {
	getProjectById(projectId: ID!): Project
	getAllProjects(take: Int, skip: Int): [Project]

	getTicketById(ticketId: ID!): Ticket
	getAllTickets(take: Int, skip: Int, filters: TicketFilterInput): [Ticket]
}

type Mutation {
	createProject(name: String!, description: String): Project
	updateProject(id: ID!, name: String!, description: String!): Project
	deleteProject(projectId: ID!): DeletedResourceResponse

	createTicket(input: CreateTicketInput!): Ticket
	updateTicket(ticketId: ID!, input: UpdateTicketInput!): Ticket
	deleteTicket(ticketId: ID!): DeletedResourceResponse
}

# --------------- INPUTS ---------------

input CreateTicketInput {
	title: String!
	description: String
	type: TicketType!
	priority: TicketPriority
	projectId: ID!
}

input TicketFilterInput {
	projectId: ID
	status: TicketStatus
	type: TicketType
	priority: TicketPriority
}

input UpdateTicketInput {
	title: String
	description: String
	type: TicketType
	priority: TicketPriority
	status: TicketStatus
}

# --------------- ./inputs ---------------
